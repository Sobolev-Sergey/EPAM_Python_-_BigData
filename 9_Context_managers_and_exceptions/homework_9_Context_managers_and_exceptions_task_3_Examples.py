"""
Задание 3*
Пересмотрите задания, которые вы выполняли ранее в курсе,
свои пет-проекты, курсовые и т.п.
Найдите фрагменты, которые вы бы теперь переписали с
использованием менеджеров контекста (если раньше их не использовали)?
Переписывать код не нужно, достаточно объяснить преподавателю,
почему контекстные менеджеры здесь - то, что нужно.
Если вы и раньше использовали их в своем коде, тоже покажите!
"""

"""
Использование менеджера контекста делает код более безопасным,
тем что он сам удаляет объекты при выходе из контекста,
исключая человеческий фактор.
Например, вам может потребоваться открыть файл, вписать в него
кучу всего и закрыть. Это классический пример работы
контекстного менеджера.

Например:

f_obj = open(path, 'w')
f_obj.write(some_data)
f_obj.close()


Но что то может пойти не так во время выполнения.
Поэтому нужно использовать менеджер контекста:


with open(path, 'w') as f_obj:
    f_obj.write(some_data)


При создании менеджеров контекста с использованием
классов пользователь должен убедиться, что у класса
есть методы: __enter __ () и __exit __ () .
__Enter __ () возвращает ресурс, которым нужно управлять,
а __exit __ () ничего не возвращает, но выполняет операции очистки.


"""
class MyClass:
    def __enter__(self):
        # Некий инициализирующий код
        return self

    def __exit__(self, *args, **kwargs):
        pass
"""

 Некий зачищающий код

 Теперь можно писать так
with MyClass() as obj:  # Вызывает MyClass.__enter__()
 Контекст где obj существует
 Действия с объектом

 Выход из контекста. Вызывает MyClass.__exit__()
 obj был удалён автоматом


Мы можем использовать его в следующих случаях:

- Управление файлами, помогает в управлении файловыми ресурсами.
  Открытие файла, записи/чтении содержимого и последующем его закрытии.

- Управление подключением к базе данных и транзакциями

- Установка соединения с ресурсами

- Обёртка соединений по протоколу

- Использование в автоматизации тестирования, в автоматических
  тестах. 
  - Проверка на возникновение исключения при тестировании.
  - Настройка mocks перед тестированием
  - Настройка среды выполнения Python
  - Автоматизация задач администрирования

- Для захвата и освобождения ресурсов. 

- Синхронизация доступа к общим ресурсам.

- Убедиться, что открытый поток закрывается

- Полезны для унификации общего кода настройки и разрыва или любой
  пары операций, которые необходимо выполнить до или после действия.

- Управление пулом процессов

- Тайминги выполнения кода

- Работа с временными файлами

- Перенаправление потоков ввода и вывода

"""
